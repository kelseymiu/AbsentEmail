import streamlit as st
from langchain import LLMChain
from langchain.chat_models import ChatOpenAI
from langchain.prompts.chat import (ChatPromptTemplate,
                                    HumanMessagePromptTemplate,
                                    SystemMessagePromptTemplate)
from langchain.document_loaders import *
from langchain.chains.summarize import load_summarize_chain
import tempfile
from langchain.docstore.document import Document

st.title("AbsentEmailGenerator")

# Initialize user input variables
reason = ""

# Generate a formal email template for explaining the absence to a professor based on the given reason
def emailTemplateGenerator(reason):
    chat = ChatOpenAI(
        model="gpt-3.5-turbo-16k",
        temperature=0
    )
    system_template = """You are an assistant designed to generate a formal email template for explaining the absence to a professor based on the given reason: '{reason}'."""
    system_message_prompt = SystemMessagePromptTemplate.from_template(system_template)
    human_template = """Subject: Absence Notification

Dear Professor,

I am writing to inform you that I will be unable to attend {reason} due to unforeseen circumstances. I apologize for any inconvenience caused and would appreciate your understanding.

If there are any assignments or materials that I will miss during this time, please let me know so that I can make arrangements to catch up.

Thank you for your attention to this matter.

Sincerely,
[Your Name]"""
    human_message_prompt = HumanMessagePromptTemplate.from_template(human_template)
    chat_prompt = ChatPromptTemplate.from_messages(
        [system_message_prompt, human_message_prompt]
    )

    chain = LLMChain(llm=chat, prompt=chat_prompt)
    result = chain.run(reason=reason)
    return result # returns string   

# Get the reason for sickness from the user
reason = st.text_input("Enter the reason for sickness")

# Initialize email template variable
email_template = ""

# Check if reason is provided and generate email template
if reason:
    email_template = emailTemplateGenerator(reason)

# Put a submit button with an appropriate title
submit_button = st.button("Generate Email Template")

# Call functions only if all user inputs are taken and the button is clicked.
if submit_button:
    # Display the generated email template to the user
    st.markdown(email_template)
